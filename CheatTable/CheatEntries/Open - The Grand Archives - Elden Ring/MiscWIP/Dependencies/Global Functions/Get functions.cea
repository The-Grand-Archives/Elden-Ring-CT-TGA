{$lua}
if syntaxcheck then return end
[ENABLE]
function getInvData(value)
	local inv = {
		-- offset, isKey, size
		[0] = { 0x5D0, 0, 2688}, -- player inventory
		[1] = { 0x8D0, 0, 1920}, -- storage chest
		[2] = { 0x5D0, 1, 384}, -- key items on player
		[3] = { 0x8D0, 1, 128}  -- key items in chest
	}
	if value ~= nil and value >= 0 and value < 4 then
		return inv[value]
	else
		return false
	end
end

function getInvOffset(value)
	return getInvData(value)[1]
end

function getItemIdx(inputId, inv)
	local GameDataMan = readPointer("GameDataMan")
	local PlayerGameData = readPointer(GameDataMan + 0x8)

	local inv = getInvData(inv or 0)
	local invOffset = inv[1]
	local keyOffset = inv[2] * 0x10

	local EquipInventoryData = readPointer(PlayerGameData + invOffset)

	local inventoryList = readPointer(EquipInventoryData + 0x10 + keyOffset)
	local inventoryNum = readInteger(EquipInventoryData + 0x18 + keyOffset)

	local itemCount = 0
	for i=0,inv[3] do
		local item = getAddress(inventoryList + i * 0x18)
		local itemId = readInteger(item + 4)

		if itemId == inputId then
			return i
		elseif itemId ~= 0xFFFFFFFF then
			itemCount = itemCount + 1
		end

		if itemCount >= inventoryNum then break end
	end
	return false
end

function getItemByIdx(idx, inv)
	local GameDataMan = readPointer("GameDataMan")
	local PlayerGameData = readPointer(GameDataMan + 0x8)

	local inv = getInvData(inv or 0)
	local invOffset = inv[1]
	local keyOffset = inv[2] * 0x10

	local EquipInventoryData = readPointer(PlayerGameData + invOffset)

	local inventoryList = readPointer(EquipInventoryData + 0x10 + keyOffset)

	local item = readInteger(inventoryList + idx * 0x18)
	if item ~= 0xFFFFFFFF then
		return item
	end
	return false
end

function getItemType(id)
	local types = {
		weapon = {0x00000000, "Weapon", 0},
		protector = {0x10000000, "Protector", 1},
		accessory = {0x20000000, "Accessory", 2},
		goods = {0x40000000, "Goods", 4},
		gem = {0x80000000, "Gem", 8},
		invalid = {0xF0000000, "Invalid", -1}
	}

	local v = 0x0FFFFFFF
	if id >= types.weapon[1] and id <= types.weapon[1] + v then
		return types.weapon
	elseif id >= types.protector[1] and id <= types.protector[1] + v then
		return types.protector
	elseif id >= types.accessory[1] and id <= types.accessory[1] + v then
		return types.accessory
	elseif id >= types.goods[1] and id <= types.goods[1] + v then
		return types.goods
	elseif id >= types.gem[1] and id <= types.gem[1] + v then
		return types.gem
	else
		return types.invalid
	end
end

function getPlayerIns(addr_or_slot)
	local WorldChrMan = readPointer("WorldChrMan")
	local r = 0
	if addr_or_slot ~= nil and addr_or_slot ~= 0 then
		if addr_or_slot >= 1 and addr_or_slot <= 5 then
			local NetPlayers = readPointer(WorldChrMan + 0x10EF8)
			r = readPointer(NetPlayers + 0x10 * addr_or_slot)
		else
			r = readPointer(addr_or_slot)
		end
	else
		r = readPointer(WorldChrMan + 0x1E508)
	end
	if readPointer(r) then
		return r
	end
	throwError("PlayerIns/EnemyIns not found")
end

function getEnemyIns(addr)
	return getPlayerIns(addr)
end

[DISABLE]
getItemIdx = nil
getItemByIdx = nil
getInvData = nil
getInvOffset = nil
getItemType = nil
getPlayerIns = nil
getEnemyIns = nil
